SetInputFolder IN/
SetOutputFolder OUT/

ReadFiles /*.hpp
PrintLines

IgnoreSideSpaces
RemoveLastEmptyLines 0 $
AddEmptyLines $ 1

FindLines% 0 $
    `#ifndef __\@UpperCase%InputBaseName\_HPP__`
    `#define __\@UpperCase%InputBaseName\_HPP__`
FindLines~% 0 $
    `#ifndef __\@UpperCase%InputBaseName\__`
    `#define __\@UpperCase%InputBaseName\__`
CopyLines^ buffer [ ]
Set^ buffer = `\@UpperCase%buffer\`
PasteLines^ buffer ]

Print! `Found :`
Print^ buffer
Print^ `\%buffer\`

PrintLines

Call! TestExpressions
Call! TestFunctions 456
Call! TestLists
Call! TestLoops 10

Exit

##

:TestExpressions

Assert! 1 + 2 * 3 == 7
Assert! 2 * 3 + 1 == 7
Assert! ( 1 + 2 ) * 3 == 9
Assert! `Hello world!` @^ 6 @$ 5 == `world`

Return

##

:TestFunctions

Set! value = 123
Set! value += %0
Assert! value == 579

Assert! `***` ~ MajorCase `test` ~ `***` == `***Test***`
Assert! `***` ~ MajorCase ( LowerCase `TEST` ) ~ `***` == `***Test***`
Assert! `***` ~ Twice `test` ~ `***` == `***testtest***`
Assert! `***` ~ Twice ( Twice `test` ) ~ `***` == `***testtesttesttest***`

Set! test = `TEST`
Assert! `***\@Twice@Twice@MajorCase@LowerCase$test\***` == `***TestTestTestTest***`

Return

##

:Twice

Return %0 ~ %0

##

:TestLists

Set! file_name_list = ``
Set file_name_list .= `\%InputName\`

Print! file_name_list
Print! file_name_list # 0
Print! file_name_list # 1

Return

##

:TestLoops

Set! index = 0

:loop
Set! index += 1
Print! index
Repeat! loop index < %0

:loop
FindText% 0 $
    #
ReplaceText* [ ]
    #
    @
Repeat* loop

Print InputPath ~ `[ ` ~ LineIndex ~ ` .. ` ~ PostLineIndex ~ ` ] : ` ~ LineCount ~ ` ` ~ HasLineInterval
PrintLines

Return
